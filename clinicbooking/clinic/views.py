
from django.shortcuts import get_object_or_404
from rest_framework.decorators import action
from rest_framework.exceptions import PermissionDenied
from clinic import serializers, paginators
from rest_framework import viewsets, generics, status, parsers, permissions
from clinic.models import (User, Doctor, Patient, Payment, Appointment, Review,
                           Schedule, Notification, HealthRecord, Message, TestResult,
                           Hospital, Specialization, UserType)
from django.db.models import Q
from rest_framework.response import Response


class HospitalViewSet(viewsets.ViewSet, generics.ListAPIView):
    queryset = Hospital.objects.filter(active=True)
    serializer_class = serializers.HospitalSerializer


class SpecializationViewSet(viewsets.ViewSet, generics.ListAPIView):
    queryset = Specialization.objects.filter(active=True)
    serializer_class = serializers.SpecializationSerializer

    def get_queryset(self):
        queryset = self.queryset

        q = self.request.query_params.get('q')
        if q:
            queryset = queryset.filter(name__icontains=q)

        hospital_id = self.request.query_params.get('hospital_id')
        if hospital_id:
            queryset = queryset.filter(hospital_id=hospital_id)

        return queryset


# L·∫•y current_user ƒë·ªÉ t·∫°o api .../current-user/ d√πng chung cho c√°c User, Patient, Doctor
class CurrentUserMixin:
    @action(methods=['get', 'patch'], detail=False, url_path='current_user',
            permission_classes=[permissions.IsAuthenticated])
    def get_current_user(self, request):
        user = request.user

        if request.method == 'PATCH':
            for k, v in request.data.items():
                if k in ['first_name', 'last_name']:
                    setattr(user, k, v)
                elif k == 'password':
                    user.set_password(v)

            user.save()

        # G·ªçi ƒë√∫ng serializer cho t·ª´ng lo·∫°i user
        serializer_class = self.get_serializer_class()
        return Response(serializer_class(user).data)


class UserViewSet(CurrentUserMixin, viewsets.ViewSet, generics.ListAPIView, generics.RetrieveAPIView,
                  generics.UpdateAPIView):
    queryset = User.objects.filter(is_active=True)
    serializer_class = serializers.UserSerializer
    parser_classes = [parsers.MultiPartParser]

    # Ch·ª©ng th·ª±c user ƒë·ªÉ xem th√¥ng tin user v√† ch·ªânh s·ª≠a 1 ph·∫ßn th√¥ng tin user
    @action(methods=['get', 'patch'], url_path='current-user', detail=False,
            permission_classes=[permissions.IsAuthenticated])
    def get_current_user(self, request):
        u = request.user
        if request.method.__eq__('PATCH'):
            for k, v in request.data.items():
                if k in ['first_name', 'last_name']:
                    setattr(u, k, v)
                elif k.__eq__('password'):
                    u.set_password(v)

            u.save()

        return Response(serializers.UserSerializer(u).data)


class DoctorViewSet(CurrentUserMixin, viewsets.ViewSet, generics.ListAPIView, generics.CreateAPIView,
                    generics.RetrieveAPIView):
    # L·∫•y nh·ªØng b√°c sƒ© n√†o ƒë√£ ƒë∆∞·ª£c admin x√°c nh·∫≠n
    queryset = Doctor.objects.filter(is_verified=True)
    serializer_class = serializers.DoctorSerializer
    parser_classes = [parsers.MultiPartParser]

    def get_queryset(self):
        queryset = self.queryset
        q = self.request.query_params.get('q')

        if q:
            queryset = queryset.filter(Q(first_name__icontains=q) |
                                       Q(last_name__icontains=q))

        return queryset

    @action(methods=['get'], detail=True, url_path='schedules')
    def get_schedules(self, request, pk):
        doctor = Doctor.objects.filter(pk=pk)

        if doctor:
            schedules = Schedule.objects.filter(doctor_id=pk)
            return Response(serializers.ScheduleSerializer(schedules, many=True).data, status=status.HTTP_200_OK)

        return Response({'error': "Doctor not found"}, status=status.HTTP_404_NOT_FOUND)

    @action(methods=['post'], detail=True, url_path='schedules', serializer_class=serializers.ScheduleSerializer)
    def create_schedule(self, request, pk):
        doctor = get_object_or_404(Doctor, pk=pk)
        data = request.data.copy()
        data['doctor'] = doctor.id

        schedule = ScheduleViewSet(data=data)
        if schedule.is_valid():
            schedule.save()
            return Response(schedule.data, status=status.HTTP_201_CREATED)

        return Response(schedule.errors, status=status.HTTP_400_BAD_REQUEST)


class PatientViewSet(CurrentUserMixin, viewsets.ViewSet, generics.ListAPIView, generics.CreateAPIView,
                     generics.RetrieveAPIView):
    queryset = Patient.objects.filter(is_active=True)
    serializer_class = serializers.PatientSerializer
    parser_classes = [parsers.MultiPartParser]

    def get_queryset(self):
        queryset = self.queryset
        q = self.request.query_params.get('q')

        if q:
            queryset = queryset.filter(Q(first_name__icontains=q) |
                                       Q(last_name__icontains=q))

        return queryset

    @action(methods=['get'], detail=True, url_path="appointments")
    def get_appointment(self, request, pk):
        patient = get_object_or_404(Patient, pk=pk)
        if patient:
            appointments = patient.appointment_set.all()
            return Response(serializers.AppointmentSerializer(appointments, many=True).data,
                            status=status.HTTP_404_NOT_FOUND)

        return Response({'error': "Patient not found"}, status=status.HTTP_404_NOT_FOUND)

    @action(methods=['post'], detail=True, url_path='appointments', permission_classes=[permissions.IsAuthenticated])
    def create_appointment(self, request, pk=None):
        patient = get_object_or_404(Patient, pk=pk)

        # Th√™m th√¥ng tin patient v√†o request.data
        data = request.data.copy()
        data['patient'] = patient.id

        serializer = serializers.AppointmentSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class HealthRecordViewSet(viewsets.ViewSet, generics.ListAPIView, generics.RetrieveAPIView, generics.CreateAPIView):
    queryset = HealthRecord.objects.filter(active=True).prefetch_related('testresult_set')
    serializer_class = serializers.HealthRecordSerializer

    def get_queryset(self):
        # üëá N·∫øu l√† request t·ª´ Swagger ƒë·ªÉ sinh schema th√¨ tr·∫£ v·ªÅ queryset r·ªóng
        if getattr(self, 'swagger_fake_view', False):
            return HealthRecord.objects.none()

        user = self.request.user
        if not user or not user.is_authenticated:
            raise PermissionDenied(detail="C·∫ßn ph·∫£i ƒëƒÉng nh·∫≠p ƒë·ªÉ xem h·ªì s∆° s·ª©c kho·∫ª")

        if user.user_type == UserType.DOCTOR or user.user_type == UserType.ADMIN:
            return HealthRecord.objects.filter(active=True).select_related('patient')
        elif user.user_type == UserType.PATIENT:
            return HealthRecord.objects.filter(patient__pk=user.pk, active=True)

        return HealthRecord.objects.none()

    # Cho ph√©p b·ªánh nh√¢n t·ª± t·∫°o h·ªì s∆° s·ª©c kho·∫ª c·ªßa ch√≠nh m√¨nh
    @action(methods=['post'], detail=False, url_path='me', permission_classes=[permissions.IsAuthenticated])
    def create_healthrecord(self, request):
        user = request.user

        # Ki·ªÉm tra ƒë√∫ng ki·ªÉu ng∆∞·ªùi d√πng
        if user.user_type != UserType.PATIENT:
            return Response({"detail": "Ch·ªâ b·ªánh nh√¢n m·ªõi ƒë∆∞·ª£c t·∫°o h·ªì s∆°."}, status=status.HTTP_403_FORBIDDEN)

        try:
            patient = Patient.objects.get(pk=user.pk)

        except Patient.DoesNotExist:
            return Response({"detail": "Kh√¥ng t√¨m th·∫•y th√¥ng tin b·ªánh nh√¢n."}, status=status.HTTP_404_NOT_FOUND)

        # Ki·ªÉm tra tr√πng h·ªì s∆°
        if HealthRecord.objects.filter(patient=patient).exists():
            return Response({"detail": "H·ªì s∆° ƒë√£ t·ªìn t·∫°i."}, status=status.HTTP_400_BAD_REQUEST)

        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            serializer.save(patient=patient)  # G√°n ƒë√∫ng ƒë·ªëi t∆∞·ª£ng
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    # B√°c sƒ© update h·ªì s∆° b·ªánh √°n c·ªßa c·ªßa b·ªánh nh√¢n
    def partial_update(self, request, pk=None):
        user = request.user

        if user.user_type != UserType.DOCTOR:
            return Response({"detail": "Ch·ªâ b√°c sƒ© ƒë∆∞·ª£c quy·ªÅn ch·ªânh s·ª≠a h·ªì s∆°."}, status=status.HTTP_403_FORBIDDEN)

        try:
            record = HealthRecord.objects.get(pk=pk)
        except HealthRecord.DoesNotExist:
            return Response({"detail": "H·ªì s∆° kh√¥ng t·ªìn t·∫°i."}, status=status.HTTP_404_NOT_FOUND)

        # Ki·ªÉm tra xem b√°c sƒ© n√†y ƒë√£ t·ª´ng kh√°m b·ªánh nh√¢n n√†y ch∆∞a
        has_examined = Appointment.objects.filter(
            doctor__pk=user.pk,
            patient=record.patient,
            status=Appointment.Status.COMPLETED  # ch·ªâ t√≠nh n·∫øu ƒë√£ ho√†n th√†nh
        ).exists()

        if not has_examined:
            return Response({"detail": "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a h·ªì s∆° c·ªßa b·ªánh nh√¢n n√†y."},
                            status=status.HTTP_403_FORBIDDEN)

        serializer = self.get_serializer(record, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()  # kh√¥ng thay ƒë·ªïi patient!
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class TestResultViewSet(viewsets.ViewSet, generics.ListAPIView):
    queryset = TestResult.objects.filter(active=True)
    serializer_class = serializers.TestResultSerializer


class AppointmentViewSet(viewsets.ViewSet, generics.ListAPIView, generics.CreateAPIView,
                         generics.UpdateAPIView, generics.DestroyAPIView):
    queryset = Appointment.objects.filter().all()
    serializer_class = serializers.AppointmentSerializer
    permission_classes = [permissions.IsAuthenticated]

    @action(detail=True, methods=["post"], permission_classes=[permissions.IsAuthenticated])
    def cancel(self, request, pk=None):
        # L·∫•y ƒë·ªëi t∆∞·ª£ng h·∫πn c·ªßa b·ªánh nh√¢n
        old_appointment = self.get_object()

        # Ki·ªÉm tra ch·ª©ng th·ª±c: Ch·ªâ b·ªánh nh√¢n ƒë√£ ƒë·∫∑t l·ªãch m·ªõi c√≥ th·ªÉ h·ªßy l·ªãch c·ªßa m√¨nh
        if old_appointment.patient != request.user.patient:
            return Response({"detail": "B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy l·ªãch n√†y."}, status=403)

        if not old_appointment.can_cancel_or_reschedule:
            return Response({"detail": "Kh√¥ng th·ªÉ h·ªßy l·ªãch trong v√≤ng 24 gi·ªù."}, status=400)

        # H·ªßy l·ªãch
        old_appointment.status = Appointment.Status.CANCELED
        old_appointment.cancel_reason = request.data.get("cancel_reason", "Kh√¥ng c√≥ l√Ω do")
        old_appointment.save()

        # C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i l·ªãch tr·ªëng
        old_appointment.schedule.is_available = True
        old_appointment.schedule.save()

        return Response({"detail": "L·ªãch h·∫πn ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng."}, status=200)

    @action(detail=True, methods=["post"], permission_classes=[permissions.IsAuthenticated])
    def reschedule(self, request, pk=None):
        old_appointment = self.get_object()

        # Ki·ªÉm tra ch·ª©ng th·ª±c: Ch·ªâ b·ªánh nh√¢n ƒë√£ ƒë·∫∑t l·ªãch m·ªõi c√≥ th·ªÉ ƒë·ªïi l·ªãch c·ªßa m√¨nh
        if old_appointment.patient != request.user.patient:
            return Response({"detail": "B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªïi l·ªãch n√†y."}, status=403)

        # Ki·ªÉm tra xem c√≥ th·ªÉ ƒë·ªïi l·ªãch hay kh√¥ng (c√≥ th·ªùi gian c√≤n h∆°n 24h kh√¥ng)
        if not old_appointment.can_cancel_or_reschedule:
            return Response({"detail": "Kh√¥ng th·ªÉ ƒë·ªïi l·ªãch trong v√≤ng 24 gi·ªù."}, status=400)

        # Ki·ªÉm tra l·ªãch m·ªõi
        new_schedule_id = request.data.get("new_schedule")
        try:
            new_schedule = Schedule.objects.get(pk=new_schedule_id, is_available=True)
        except Schedule.DoesNotExist:
            return Response({"detail": "L·ªãch m·ªõi kh√¥ng h·ª£p l·ªá."}, status=400)

        # H·ªßy l·ªãch c≈©
        old_appointment.status = Appointment.Status.CANCELED
        old_appointment.cancel_reason = "Ng∆∞·ªùi d√πng ƒë·ªïi l·ªãch h·∫πn"
        old_appointment.save()

        # T·∫°o l·ªãch m·ªõi
        new_appointment = Appointment.objects.create(
            patient=old_appointment.patient,
            doctor=old_appointment.doctor,
            schedule=new_schedule,
            disease_type=old_appointment.disease_type,
            symptoms=old_appointment.symptoms,
            status=Appointment.Status.PENDING,
            rescheduled_from=old_appointment,
        )

        # ƒê√°nh d·∫•u l·ªãch m·ªõi ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t
        new_schedule.is_available = False
        new_schedule.save()

        # Tr·∫£ v·ªÅ th√¥ng tin l·ªãch m·ªõi
        return Response(serializers.AppointmentSerializer(new_appointment).data, status=201)

    @action(methods=['get'], detail=True, url_path="payment")
    def get_payment(self, request, pk):
        appointment = get_object_or_404(Appointment, pk=pk)
        if appointment:
            payment = appointment.payment
            if payment:
                return Response(serializers.PaymentSerializer(payment).data, status=status.HTTP_200_OK)
            else:
                return Response({'error': f'Payment not found for {payment.pk}'}, status=status.HTTP_404_NOT_FOUND)

        return Response({"error": "Appointment not found"}, status=status.HTTP_404_NOT_FOUND)


class ScheduleViewSet(viewsets.ViewSet, generics.ListAPIView,
                      generics.CreateAPIView, generics.UpdateAPIView):
    queryset = Schedule.objects.filter(active=True)
    serializer_class = serializers.ScheduleSerializer
    parser_classes = [parsers.MultiPartParser]

    def get_queryset(self):
        queryset = self.queryset
        doctor_id = self.request.query_params.get('doctor_id')
        print(doctor_id)
        if doctor_id:
            queryset = queryset.filter(doctor_id=doctor_id)

        return queryset


class MessageViewSet(viewsets.ViewSet, generics.ListAPIView, generics.CreateAPIView, generics.UpdateAPIView):
    queryset = Message.objects.all().order_by('created_date')
    serializer_class = serializers.MessageSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        user = self.request.user
        queryset = self.queryset

        appointment_id = self.request.query_params.get('appointment')
        if appointment_id:
            return queryset.filter(test_result__appointment__patient=user) | queryset.filter(test_result__appointment__doctor=user)

        sender_id = self.request.query_params.get('sender')
        receiver_id = self.request.query_params.get('receiver')
        if sender_id and receiver_id:
            if str(user.id) != sender_id and str(user.id) != receiver_id:
                raise PermissionDenied("B·∫°n kh√¥ng c√≥ quy·ªÅn xem tin nh·∫Øn n√†y.")
            return queryset.filter(
                Q(sender_id=sender_id, receiver_id=receiver_id) |
                Q(sender_id=receiver_id, receiver_id=sender_id)
            ).order_by('created_date')

        return queryset.none()

    def perform_create(self, serializer):
        user = self.request.user
        receiver = serializer.validated_data.get('receiver')

        if not receiver:
            raise PermissionDenied("B·∫°n ph·∫£i ch·ªçn ng∆∞·ªùi nh·∫≠n tin nh·∫Øn.")

        if not hasattr(user, 'user_type') or user.user_type not in [UserType.PATIENT, UserType.DOCTOR]:
            raise PermissionDenied("B·∫°n kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn.")

        if not hasattr(receiver, 'user_type') or receiver.user_type not in [UserType.PATIENT, UserType.DOCTOR]:
            raise PermissionDenied("Ng∆∞·ªùi nh·∫≠n ph·∫£i l√† b·ªánh nh√¢n ho·∫∑c b√°c sƒ©.")

        # B·ªánh nh√¢n ch·ªâ ƒë∆∞·ª£c ph√©p nh·∫Øn v·ªõi b√°c sƒ©
        if user.user_type == UserType.PATIENT and receiver.user_type != UserType.DOCTOR:
            raise PermissionDenied("B·ªánh nh√¢n ch·ªâ ƒë∆∞·ª£c ph√©p nh·∫Øn tin cho b√°c sƒ©.")

        # B√°c sƒ© ch·ªâ ƒë∆∞·ª£c ph√©p nh·∫Øn v·ªõi b·ªánh nh√¢n
        if user.user_type == UserType.DOCTOR and receiver.user_type != UserType.PATIENT:
            raise PermissionDenied("B√°c sƒ© ch·ªâ ƒë∆∞·ª£c ph√©p nh·∫Øn tin cho b·ªánh nh√¢n.")

        # N·∫øu ƒë√∫ng th√¨ l∆∞u tin nh·∫Øn
        serializer.save(sender=user)


class ReviewViewSet(viewsets.ModelViewSet):
    queryset = Review.objects.all().order_by('created_date')
    serializer_class = serializers.ReviewSerializer

    def get_queryset(self):
        doctor_id = self.request.query_params.get('doctor')
        if doctor_id:
            return self.queryset.filter(doctor_id=doctor_id)
        return self.queryset

    @action(detail=True, methods=['patch'], permission_classes=[permissions.IsAuthenticated])
    def reply(self, request, pk=None):
        review = self.get_object()
        reply_text = request.data.get('reply')

        # Ki·ªÉm tra quy·ªÅn b√°c sƒ© ph·∫£n h·ªìi
        user = request.user
        if not (user.user_type == UserType.DOCTOR and review.doctor_id == user.id):
            raise PermissionDenied("B·∫°n kh√¥ng c√≥ quy·ªÅn ph·∫£n h·ªìi ƒë√°nh gi√° n√†y.")

        if not reply_text:
            return Response({"detail": "Thi·∫øu n·ªôi dung ph·∫£n h·ªìi"}, status=status.HTTP_400_BAD_REQUEST)

        review.reply = reply_text
        review.save()
        return Response(self.get_serializer(review).data, status=status.HTTP_200_OK)

# class PaymentViewSet(viewsets.ViewSet):
#     queryset = Payment.objects.all()
#     serializer_class = PaymentSerializer
#
#     @action(detail=True, methods=['post'])
#     def process_payment(self, request, pk=None):
#         payment = get_object_or_404(Payment, pk=pk)
#         payment.status = Payment.PaymentStatus.PAID
#         payment.transaction_id = request.data.get('transaction_id', '')
#         payment.save()
#
#         self.send_payment_success_email(payment)
#
#         return Response({'message': 'Thanh to√°n th√†nh c√¥ng'}, status=status.HTTP_200_OK)
#
#     def send_payment_success_email(self, payment):
#         subject = "Thanh to√°n th√†nh c√¥ng"
#         message = f"Ch√†o {payment.appointment.patient.first_name},\n\n" \
#                   f"Thanh to√°n cho d·ªãch v·ª• kh√°m b·ªánh c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ho√†n t·∫•t.\n" \
#                   f"Chi ti·∫øt:\n" \
#                   f"Ph∆∞∆°ng th·ª©c thanh to√°n: {payment.method}\n" \
#                   f"S·ªë ti·ªÅn: {payment.amount} VND\n" \
#                   f"Ho√° ƒë∆°n s·ªë: {payment.invoice_number}\n\n" \
#                   f"Ch√∫c b·∫°n s·ª©c kh·ªèe!"
#         recipient_email = payment.appointment.patient.email
#         send_mail(subject, message, settings.DEFAULT_FROM_EMAIL, [recipient_email])